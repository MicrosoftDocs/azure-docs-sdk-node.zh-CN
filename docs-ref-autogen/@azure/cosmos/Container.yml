### YamlMime:UniversalReference
ms.openlocfilehash: 8d085c8c928b40486992ef118d6155a39853015e
ms.sourcegitcommit: 87f95d58ec8de16e115bc344efeb084afc346b74
ms.translationtype: MT
ms.contentlocale: zh-CN
ms.lasthandoff: 08/12/2018
ms.locfileid: "40050241"
items:
- uid: '@azure/cosmos.Container'
  name: Container
  fullName: Container
  children:
  - '@azure/cosmos.Container.conflict'
  - '@azure/cosmos.Container.database'
  - '@azure/cosmos.Container.delete'
  - '@azure/cosmos.Container.id'
  - '@azure/cosmos.Container.item'
  - '@azure/cosmos.Container.items'
  - '@azure/cosmos.Container.read'
  - '@azure/cosmos.Container.replace'
  - '@azure/cosmos.Container.storedProcedure'
  - '@azure/cosmos.Container.storedProcedures'
  - '@azure/cosmos.Container.trigger'
  - '@azure/cosmos.Container.triggers'
  - '@azure/cosmos.Container.url'
  - '@azure/cosmos.Container.userDefinedFunction'
  - '@azure/cosmos.Container.userDefinedFunctions'
  langs:
  - typeScript
  type: class
  summary: 用于读取、 替换或按 id 删除特定的现有容器的操作。
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Container.conflict'
  name: conflict
  children: []
  type: method
  langs:
  - typeScript
  summary: 用于读取、 替换或删除特定的现有<xref:Conflict>按 id。使用`.conflicts`用于创建新的冲突，或查询/读取所有冲突。
  syntax:
    content: 'function conflict(id: string)'
    parameters:
    - id: id
      type:
      - string
      description: >
        Id <xref:Conflict>。
    return:
      type:
      - '@azure/cosmos.Conflict'
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Container.database'
  name: database
  fullName: database
  children: []
  langs:
  - typeScript
  type: property
  summary: ''
  syntax:
    content: 'database: Database'
    return:
      type:
      - '@azure/cosmos.Database'
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Container.delete'
  name: delete
  children: []
  type: method
  langs:
  - typeScript
  summary: 删除容器
  syntax:
    content: 'function delete(options?: RequestOptions)'
    parameters:
    - id: options
      type:
      - '@azure/cosmos.RequestOptions'
      description: ''
      optional: true
    return:
      type:
      - Promise<@azure/cosmos.ContainerResponse>
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Container.id'
  name: id
  fullName: id
  children: []
  langs:
  - typeScript
  type: property
  summary: ''
  syntax:
    content: 'id: string'
    return:
      type:
      - string
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Container.item'
  name: item
  children: []
  type: method
  langs:
  - typeScript
  summary: >
    用于读取、 替换或删除特定的现有<xref:Item>按 id。使用`.items`用于创建新的项目，或查询/读取的所有项。
  syntax:
    content: 'function item(id: string, partitionKey?: string)'
    parameters:
    - id: id
      type:
      - string
      description: Id <xref:Item>。
    - id: partitionKey
      type:
      - string
      description: 分区键的<xref:Item>。 （对于已分区容器必需）。
      optional: true
    return:
      type:
      - '@azure/cosmos.Item'
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Container.items'
  name: items
  fullName: items
  children: []
  langs:
  - typeScript
  type: property
  summary: >
    用于创建新的项目，并读取/查询的读取、 替换或删除现有项，所有项的操作使用`.item(id)`。
  syntax:
    content: 'items: Items'
    return:
      type:
      - '@azure/cosmos.Items'
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Container.read'
  name: read
  children: []
  type: method
  langs:
  - typeScript
  summary: 读取容器的定义
  syntax:
    content: 'function read(options?: RequestOptions)'
    parameters:
    - id: options
      type:
      - '@azure/cosmos.RequestOptions'
      description: ''
      optional: true
    return:
      type:
      - Promise<@azure/cosmos.ContainerResponse>
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Container.replace'
  name: replace
  children: []
  type: method
  langs:
  - typeScript
  summary: 将容器的定义为
  syntax:
    content: 'function replace(body: ContainerDefinition, options?: RequestOptions)'
    parameters:
    - id: body
      type:
      - '@azure/cosmos.ContainerDefinition'
      description: ''
    - id: options
      type:
      - '@azure/cosmos.RequestOptions'
      description: ''
      optional: true
    return:
      type:
      - Promise<@azure/cosmos.ContainerResponse>
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Container.storedProcedure'
  name: storedProcedure
  children: []
  type: method
  langs:
  - typeScript
  summary: 用于读取、 替换或删除特定的现有<xref:StoredProcedure>按 id。使用`.storedProcedures`用于创建新的存储的过程或查询/读取所有存储的过程。
  syntax:
    content: 'function storedProcedure(id: string)'
    parameters:
    - id: id
      type:
      - string
      description: >
        Id <xref:StoredProcedure>。
    return:
      type:
      - '@azure/cosmos.StoredProcedure'
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Container.storedProcedures'
  name: storedProcedures
  fullName: storedProcedures
  children: []
  langs:
  - typeScript
  type: property
  summary: >
    用于创建新的存储的过程，并读取/查询的所有存储的过程的操作。

    对于读取、 替换或删除现有的存储的过程，使用`.storedProcedure(id)`。
  syntax:
    content: 'storedProcedures: StoredProcedures'
    return:
      type:
      - '@azure/cosmos.StoredProcedures'
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Container.trigger'
  name: trigger
  children: []
  type: method
  langs:
  - typeScript
  summary: 用于读取、 替换或删除特定的现有<xref:Trigger>按 id。使用`.triggers`用于创建新的触发器，或查询/读取所有触发器。
  syntax:
    content: 'function trigger(id: string)'
    parameters:
    - id: id
      type:
      - string
      description: >
        Id <xref:Trigger>。
    return:
      type:
      - '@azure/cosmos.Trigger'
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Container.triggers'
  name: triggers
  fullName: triggers
  children: []
  langs:
  - typeScript
  type: property
  summary: >
    用于创建新的触发器和读取/查询的所有触发器的操作。

    对于读取、 替换或删除现有的触发器，请使用`.trigger(id)`。
  syntax:
    content: 'triggers: Triggers'
    return:
      type:
      - '@azure/cosmos.Triggers'
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Container.url'
  name: url
  fullName: url
  children: []
  langs:
  - typeScript
  type: property
  summary: 返回资源的引用 URL。 用于在权限链接。
  syntax:
    content: 'url: string'
    return:
      type:
      - string
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Container.userDefinedFunction'
  name: userDefinedFunction
  children: []
  type: method
  langs:
  - typeScript
  summary: 用于读取、 替换或删除特定的现有<xref:UserDefinedFunction>按 id。使用`.userDefinedFunctions`用于创建新的用户定义函数，或查询/读取所有用户定义的函数。
  syntax:
    content: 'function userDefinedFunction(id: string)'
    parameters:
    - id: id
      type:
      - string
      description: >
        Id <xref:UserDefinedFunction>。
    return:
      type:
      - '@azure/cosmos.UserDefinedFunction'
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Container.userDefinedFunctions'
  name: userDefinedFunctions
  fullName: userDefinedFunctions
  children: []
  langs:
  - typeScript
  type: property
  summary: >
    用于创建新用户的操作定义的函数，并读取/查询所有用户定义的函数。

    对于读取、 替换或删除现有的用户定义函数，使用`.userDefinedFunction(id)`。
  syntax:
    content: 'userDefinedFunctions: UserDefinedFunctions'
    return:
      type:
      - '@azure/cosmos.UserDefinedFunctions'
  package: '@azure/cosmos'
references:
- uid: '@azure/cosmos.Database'
  spec.typeScript:
  - name: Database
    fullName: Database
    uid: '@azure/cosmos.Database'
- uid: '@azure/cosmos.Items'
  spec.typeScript:
  - name: Items
    fullName: Items
    uid: '@azure/cosmos.Items'
- uid: '@azure/cosmos.StoredProcedures'
  spec.typeScript:
  - name: StoredProcedures
    fullName: StoredProcedures
    uid: '@azure/cosmos.StoredProcedures'
- uid: '@azure/cosmos.Triggers'
  spec.typeScript:
  - name: Triggers
    fullName: Triggers
    uid: '@azure/cosmos.Triggers'
- uid: '@azure/cosmos.UserDefinedFunctions'
  spec.typeScript:
  - name: UserDefinedFunctions
    fullName: UserDefinedFunctions
    uid: '@azure/cosmos.UserDefinedFunctions'
- uid: '@azure/cosmos.Conflict'
  spec.typeScript:
  - name: Conflict
    fullName: Conflict
    uid: '@azure/cosmos.Conflict'
- uid: '@azure/cosmos.RequestOptions'
  spec.typeScript:
  - name: RequestOptions
    fullName: RequestOptions
    uid: '@azure/cosmos.RequestOptions'
- uid: Promise<@azure/cosmos.ContainerResponse>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: ContainerResponse
    fullName: ContainerResponse
    uid: '@azure/cosmos.ContainerResponse'
  - name: '>'
    fullName: '>'
- uid: '@azure/cosmos.Item'
  spec.typeScript:
  - name: Item
    fullName: Item
    uid: '@azure/cosmos.Item'
- uid: '@azure/cosmos.ContainerDefinition'
  spec.typeScript:
  - name: ContainerDefinition
    fullName: ContainerDefinition
    uid: '@azure/cosmos.ContainerDefinition'
- uid: '@azure/cosmos.StoredProcedure'
  spec.typeScript:
  - name: StoredProcedure
    fullName: StoredProcedure
    uid: '@azure/cosmos.StoredProcedure'
- uid: '@azure/cosmos.Trigger'
  spec.typeScript:
  - name: Trigger
    fullName: Trigger
    uid: '@azure/cosmos.Trigger'
- uid: '@azure/cosmos.UserDefinedFunction'
  spec.typeScript:
  - name: UserDefinedFunction
    fullName: UserDefinedFunction
    uid: '@azure/cosmos.UserDefinedFunction'
