### YamlMime:UniversalReference
items:
  - uid: '@azure/ms-rest-azure-js.LROPoller'
    name: LROPoller
    fullName: LROPoller
    children:
      - '@azure/ms-rest-azure-js.LROPoller.getInitialResponse'
      - '@azure/ms-rest-azure-js.LROPoller.getMostRecentResponse'
      - '@azure/ms-rest-azure-js.LROPoller.getOperationResponse'
      - '@azure/ms-rest-azure-js.LROPoller.getOperationStatus'
      - '@azure/ms-rest-azure-js.LROPoller.getPollState'
      - '@azure/ms-rest-azure-js.LROPoller.isFinalStatusAcceptable'
      - '@azure/ms-rest-azure-js.LROPoller.isFinished'
      - '@azure/ms-rest-azure-js.LROPoller.constructor'
      - '@azure/ms-rest-azure-js.LROPoller.poll'
      - '@azure/ms-rest-azure-js.LROPoller.pollUntilFinished'
    langs:
      - typeScript
    type: class
    summary: <span data-ttu-id="79c27-101">HTTP 操作响应，它提供用于进行交互的特殊方法 LROs （长时间运行的操作）。</span><span class="sxs-lookup"><span data-stu-id="79c27-101">An HTTP operation response that provides special methods for interacting with LROs (long running operations).</span></span>
    package: '@azure/ms-rest-azure-js'
  - uid: '@azure/ms-rest-azure-js.LROPoller.getInitialResponse'
    name: getInitialResponse()
    children: []
    type: method
    langs:
      - typeScript
    summary: <span data-ttu-id="79c27-102">获取该服务发送时进行 lro 操作已启动的第一个响应。</span><span class="sxs-lookup"><span data-stu-id="79c27-102">Get the first response that the service sent back when the LRO was initiated.</span></span>
    syntax:
      content: function getInitialResponse()
      parameters: []
      return:
        type:
          - HttpOperationResponse
    package: '@azure/ms-rest-azure-js'
  - uid: '@azure/ms-rest-azure-js.LROPoller.getMostRecentResponse'
    name: getMostRecentResponse()
    children: []
    type: method
    langs:
      - typeScript
    summary: <span data-ttu-id="79c27-103">获取最新服务返回在此进行 lro 操作过程中发送的响应。</span><span class="sxs-lookup"><span data-stu-id="79c27-103">Get the most recent response that the service sent back during this LRO.</span></span>
    syntax:
      content: function getMostRecentResponse()
      parameters: []
      return:
        type:
          - HttpOperationResponse
    package: '@azure/ms-rest-azure-js'
  - uid: '@azure/ms-rest-azure-js.LROPoller.getOperationResponse'
    name: getOperationResponse()
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      <span data-ttu-id="79c27-104">如果进行 lro 操作完成，然后在可接受的状态，然后返回 HttpOperationResponse。</span><span class="sxs-lookup"><span data-stu-id="79c27-104">If the LRO is finished and in an acceptable state, then return the HttpOperationResponse.</span></span> <span data-ttu-id="79c27-105">如果进行 lro 操作完成，然后不在可接受的状态，然后引发进行 lro 操作生成的错误。</span><span class="sxs-lookup"><span data-stu-id="79c27-105">If the LRO is finished and not in an acceptable state, then throw the error that the LRO produced.</span></span>
      <span data-ttu-id="79c27-106">如果进行 lro 操作未完成，然后返回未定义。</span><span class="sxs-lookup"><span data-stu-id="79c27-106">If the LRO is not finished, then return undefined.</span></span>
    syntax:
      content: function getOperationResponse()
      parameters: []
      return:
        type:
          - Promise<HttpOperationResponse | undefined>
    package: '@azure/ms-rest-azure-js'
  - uid: '@azure/ms-rest-azure-js.LROPoller.getOperationStatus'
    name: getOperationStatus()
    children: []
    type: method
    langs:
      - typeScript
    summary: <span data-ttu-id="79c27-107">获取进行 lro 操作的当前状态。</span><span class="sxs-lookup"><span data-stu-id="79c27-107">Get the current status of the LRO.</span></span>
    syntax:
      content: function getOperationStatus()
      parameters: []
      return:
        type:
          - '@azure/ms-rest-azure-js.LongRunningOperationStates'
    package: '@azure/ms-rest-azure-js'
  - uid: '@azure/ms-rest-azure-js.LROPoller.getPollState'
    name: getPollState()
    children: []
    type: method
    langs:
      - typeScript
    summary: '<span data-ttu-id="79c27-108">获取可用于轮询在不同的上下文中此 LRO LROPollState 对象 (如其他进程或另一台计算机上)。</span><span class="sxs-lookup"><span data-stu-id="79c27-108">Get an LROPollState object that can be used to poll this LRO in a different context (such as on a different process or a different machine).</span></span> <span data-ttu-id="79c27-109">如果进行 lro 操作无法生成进行 lro 操作轮询策略，则这将返回未定义。</span><span class="sxs-lookup"><span data-stu-id="79c27-109">If the LRO couldn''t produce an LRO polling strategy, then this will return undefined.</span></span>'
    syntax:
      content: function getPollState()
      parameters: []
      return:
        type:
          - '@azure/ms-rest-azure-js.LROPollState | undefined'
    package: '@azure/ms-rest-azure-js'
  - uid: '@azure/ms-rest-azure-js.LROPoller.isFinalStatusAcceptable'
    name: isFinalStatusAcceptable()
    children: []
    type: method
    langs:
      - typeScript
    summary: '<span data-ttu-id="79c27-110">获取指示进行 lro 操作已完成和其最终状态是可接受。</span><span class="sxs-lookup"><span data-stu-id="79c27-110">Get whether or not the LRO is finished and its final state is acceptable.</span></span> <span data-ttu-id="79c27-111">如果进行 lro 操作具有未完成，则未定义都将返回。</span><span class="sxs-lookup"><span data-stu-id="79c27-111">If the LRO has not finished yet, then undefined will be returned.</span></span> <span data-ttu-id="79c27-112">Azure 服务使用来执行长时间运行的操作由进行 lro 操作策略，确定"可接受"的最终状态。</span><span class="sxs-lookup"><span data-stu-id="79c27-112">An "acceptable" final state is determined by the LRO strategy that the Azure service uses to perform long running operations.</span></span>'
    syntax:
      content: function isFinalStatusAcceptable()
      parameters: []
      return:
        type:
          - boolean | undefined
    package: '@azure/ms-rest-azure-js'
  - uid: '@azure/ms-rest-azure-js.LROPoller.isFinished'
    name: isFinished()
    children: []
    type: method
    langs:
      - typeScript
    summary: <span data-ttu-id="79c27-113">获取指示进行 lro 操作完成。</span><span class="sxs-lookup"><span data-stu-id="79c27-113">Get whether or not the LRO is finished.</span></span>
    syntax:
      content: function isFinished()
      parameters: []
      return:
        type:
          - boolean
    package: '@azure/ms-rest-azure-js'
  - uid: '@azure/ms-rest-azure-js.LROPoller.constructor'
    name: 'LROPoller(LROPollStrategy | undefined, HttpOperationResponse)'
    children: []
    type: constructor
    langs:
      - typeScript
    summary: <span data-ttu-id="79c27-114">创建新 HttpLongRunningOperationResponse。</span><span class="sxs-lookup"><span data-stu-id="79c27-114">Create a new HttpLongRunningOperationResponse.</span></span>
    syntax:
      content: 'new LROPoller(_lroPollStrategy: LROPollStrategy | undefined, _initialResponse: HttpOperationResponse)'
      parameters:
        - id: _lroPollStrategy
          type:
            - '@azure/ms-rest-azure-js.LROPollStrategy | undefined'
          description: |
            <span data-ttu-id="79c27-115">LROPollStrategy 此 HttpLongRunningOperationResponse 将用来进行 lro 操作与之交互。</span><span class="sxs-lookup"><span data-stu-id="79c27-115">The LROPollStrategy that this HttpLongRunningOperationResponse will use to interact with the LRO.</span></span>
        - id: _initialResponse
          type:
            - HttpOperationResponse
          description: ''
    package: '@azure/ms-rest-azure-js'
  - uid: '@azure/ms-rest-azure-js.LROPoller.poll'
    name: poll()
    children: []
    type: method
    langs:
      - typeScript
    summary: <span data-ttu-id="79c27-116">发送单个轮询请求并返回进行 lro 操作的状态。</span><span class="sxs-lookup"><span data-stu-id="79c27-116">Send a single poll request and return the LRO's state.</span></span>
    syntax:
      content: function poll()
      parameters: []
      return:
        type:
          - Promise<@azure/ms-rest-azure-js.LongRunningOperationStates>
    package: '@azure/ms-rest-azure-js'
  - uid: '@azure/ms-rest-azure-js.LROPoller.pollUntilFinished'
    name: pollUntilFinished()
    children: []
    type: method
    langs:
      - typeScript
    summary: <span data-ttu-id="79c27-117">将检查进行 lro 操作的状态，直到确定完成进行 lro 操作的轮询请求发送。</span><span class="sxs-lookup"><span data-stu-id="79c27-117">Send poll requests that check the LRO's status until it is determined that the LRO is finished.</span></span>
    syntax:
      content: function pollUntilFinished()
      parameters: []
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/ms-rest-azure-js'
references:
  - uid: '@azure/ms-rest-azure-js.LROPollStrategy | undefined'
    name: LROPollStrategy | undefined
    spec.typeScript:
      - name: LROPollStrategy
        fullName: LROPollStrategy
        uid: '@azure/ms-rest-azure-js.LROPollStrategy'
      - name: ' | undefined'
        fullName: ' | undefined'
  - uid: '@azure/ms-rest-azure-js.LongRunningOperationStates'
    name: LongRunningOperationStates
    spec.typeScript:
      - name: LongRunningOperationStates
        fullName: LongRunningOperationStates
        uid: '@azure/ms-rest-azure-js.LongRunningOperationStates'
  - uid: '@azure/ms-rest-azure-js.LROPollState | undefined'
    name: LROPollState | undefined
    spec.typeScript:
      - name: LROPollState
        fullName: LROPollState
        uid: '@azure/ms-rest-azure-js.LROPollState'
      - name: ' | undefined'
        fullName: ' | undefined'
  - uid: Promise<@azure/ms-rest-azure-js.LongRunningOperationStates>
    name: LongRunningOperationStates>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: LongRunningOperationStates
        fullName: LongRunningOperationStates
        uid: '@azure/ms-rest-azure-js.LongRunningOperationStates'
      - name: '>'
        fullName: '>'