### YamlMime:UniversalReference
items:
  - uid: '@azure/cognitiveservices-face.Face'
    name: Face
    fullName: Face
    children:
      - '@azure/cognitiveservices-face.Face.detectWithStream_2'
      - '@azure/cognitiveservices-face.Face.detectWithStream'
      - '@azure/cognitiveservices-face.Face.detectWithStream_1'
      - '@azure/cognitiveservices-face.Face.detectWithUrl_2'
      - '@azure/cognitiveservices-face.Face.detectWithUrl'
      - '@azure/cognitiveservices-face.Face.detectWithUrl_1'
      - '@azure/cognitiveservices-face.Face.constructor'
      - '@azure/cognitiveservices-face.Face.findSimilar_2'
      - '@azure/cognitiveservices-face.Face.findSimilar'
      - '@azure/cognitiveservices-face.Face.findSimilar_1'
      - '@azure/cognitiveservices-face.Face.group'
      - '@azure/cognitiveservices-face.Face.group_2'
      - '@azure/cognitiveservices-face.Face.group_1'
      - '@azure/cognitiveservices-face.Face.identify_2'
      - '@azure/cognitiveservices-face.Face.identify'
      - '@azure/cognitiveservices-face.Face.identify_1'
      - '@azure/cognitiveservices-face.Face.verifyFaceToFace'
      - '@azure/cognitiveservices-face.Face.verifyFaceToFace_2'
      - '@azure/cognitiveservices-face.Face.verifyFaceToFace_1'
      - '@azure/cognitiveservices-face.Face.verifyFaceToPerson_2'
      - '@azure/cognitiveservices-face.Face.verifyFaceToPerson'
      - '@azure/cognitiveservices-face.Face.verifyFaceToPerson_1'
    langs:
      - typeScript
    type: class
    summary: 表示人脸的类。
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.detectWithStream_2'
    name: 'detectWithStream(msRest.HttpRequestBody, FaceDetectWithStreamOptionalParams, ServiceCallback<DetectedFace[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function detectWithStream(image: msRest.HttpRequestBody, options: FaceDetectWithStreamOptionalParams, callback: ServiceCallback<DetectedFace[]>)'
      parameters:
        - id: image
          type:
            - msRest.HttpRequestBody
          description: 图像流。
        - id: options
          type:
            - '@azure/cognitiveservices-face.FaceDetectWithStreamOptionalParams'
          description: 可选参数
        - id: callback
          type:
            - 'ServiceCallback<@azure/cognitiveservices-face.DetectedFace[]>'
          description: |
            回调
      return:
        type:
          - Promise<Models.FaceDetectWithStreamResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.detectWithStream'
    name: 'detectWithStream(msRest.HttpRequestBody, Models.FaceDetectWithStreamOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      检测图像中的人脸，返回人脸矩形以及可选的 faceId、地标和属性。<br />
      * 将存储中没有图像。 仅提取人脸功能将存储在服务器上。 FaceId 是人脸功能的标识符和将用于[人脸-识别](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239)，[人脸-验证](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523a)，和 [人脸
      - 查找 Similar](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237)。
      存储的人脸功能将过期，删除原始检测调用之后的 24 小时。
      * 可选参数包括 faceId、 界标、 和属性。 属性包括年龄、 性别、 headPose、 微笑、 facialHair、 眼镜、 情感、 头发、 构成、 封闭、 附件、 模糊、 曝光和降噪。 一些特定属性返回的结果可能不是非常准确。
      * 支持 JPEG、 PNG、 GIF （第一个帧） 和 BMP 格式。 允许的图像文件大小是从 1 KB 到 6 MB。
      * 最多 100 人脸可返回图像。 人脸是按从大到小的人脸矩形大小排序。
      * 为了获得最佳结果，查询时[人脸-识别](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239)，[人脸-验证](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523a)，和 [人脸
      - 查找的 Similar](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237) （returnFaceId 为 true），请使用人脸的： 正面、 明确且具有的最小大小为 200 x 200 像素 （100 个像素之间的眼睛）。
      * 最小可检测的面部大小为 36x36 像素中不能大于 1920 x 1080 像素的图像。
      具有维度大于 1920 x 1080 像素的图像将需要按比例较大的最小的人脸大小。
      * 可以提供不同的 detectionModel 值。 若要使用并比较了不同检测模型，请参阅[如何指定检测模型](https://docs.microsoft.com/en-us/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model)
      | 模型 | 建议使用-case(s) |
      | ---------- | -------- |
      | detection_01: | [人脸-默认检测模型
      Detect](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236)。 建议的正面人脸检测附近。 对于特别大角度 （头部姿势） 的人脸、 封闭的人脸或错误的图像方向的情况，可能检测这种情况下中的人脸。 | |detection_02: |2019 年发布的检测模型可能，尤其是在小型、 侧和模糊的人脸上的改进准确度。 |
      * 提供了不同 recognitionModel 值。 如果等跟进操作的验证，标识，查找类似需要，请使用 recognitionModel 参数指定的识别模型。 默认值为 recognitionModel 是 recognition_01，如果最新模型需要请显式指定所需的模型中此参数。 指定后，检测到的 faceIds 将与指定的识别模型相关联。 更多详细信息，请参阅[如何指定一个认证模型](https://docs.microsoft.com/en-us/azure/cognitive-services/face/face-api-how-to-topics/specify-recognition-model)
      | 模型 | 建议使用-case(s) |
      | ---------- | -------- |
      | recognition_01: | [人脸-默认识别模型
      Detect](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236)。 所有这些 faceIds 2019 年 3 月之前创建的是与此识别模型绑定。 | |recognition_02: |识别在 2019 年 3 月发布模型。 建议 recognition_02，因为其总体准确性得到了改进与 recognition_01 相比。 |
    syntax:
      content: 'function detectWithStream(image: msRest.HttpRequestBody, options?: Models.FaceDetectWithStreamOptionalParams)'
      parameters:
        - id: image
          type:
            - msRest.HttpRequestBody
          description: 图像流。
        - id: options
          type:
            - Models.FaceDetectWithStreamOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.FaceDetectWithStreamResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.detectWithStream_1'
    name: 'detectWithStream(msRest.HttpRequestBody, ServiceCallback<DetectedFace[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function detectWithStream(image: msRest.HttpRequestBody, callback: ServiceCallback<DetectedFace[]>)'
      parameters:
        - id: image
          type:
            - msRest.HttpRequestBody
          description: 图像流。
        - id: callback
          type:
            - 'ServiceCallback<@azure/cognitiveservices-face.DetectedFace[]>'
          description: |
            回调
      return:
        type:
          - Promise<Models.FaceDetectWithStreamResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.detectWithUrl_2'
    name: 'detectWithUrl(string, FaceDetectWithUrlOptionalParams, ServiceCallback<DetectedFace[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function detectWithUrl(url: string, options: FaceDetectWithUrlOptionalParams, callback: ServiceCallback<DetectedFace[]>)'
      parameters:
        - id: url
          type:
            - string
          description: 可公开访问的图像的 URL
        - id: options
          type:
            - '@azure/cognitiveservices-face.FaceDetectWithUrlOptionalParams'
          description: 可选参数
        - id: callback
          type:
            - 'ServiceCallback<@azure/cognitiveservices-face.DetectedFace[]>'
          description: |
            回调
      return:
        type:
          - Promise<Models.FaceDetectWithUrlResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.detectWithUrl'
    name: 'detectWithUrl(string, Models.FaceDetectWithUrlOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      检测图像中的人脸，返回人脸矩形以及可选的 faceId、地标和属性。<br />
      * 将存储中没有图像。 仅提取人脸功能将存储在服务器上。 FaceId 是人脸功能的标识符和将用于[人脸-识别](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239)，[人脸-验证](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523a)，和 [人脸
      - 查找 Similar](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237)。
      存储的人脸功能将过期，删除原始检测调用之后的 24 小时。
      * 可选参数包括 faceId、 界标、 和属性。 属性包括年龄、 性别、 headPose、 微笑、 facialHair、 眼镜、 情感、 头发、 构成、 封闭、 附件、 模糊、 曝光和降噪。 一些特定属性返回的结果可能不是非常准确。
      * 支持 JPEG、 PNG、 GIF （第一个帧） 和 BMP 格式。 允许的图像文件大小是从 1 KB 到 6 MB。
      * 最多 100 人脸可返回图像。 人脸是按从大到小的人脸矩形大小排序。
      * 为了获得最佳结果，查询时[人脸-识别](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239)，[人脸-验证](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523a)，和 [人脸
      - 查找的 Similar](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237) （returnFaceId 为 true），请使用人脸的： 正面、 明确且具有的最小大小为 200 x 200 像素 （100 个像素之间的眼睛）。
      * 最小可检测的面部大小为 36x36 像素中不能大于 1920 x 1080 像素的图像。
      具有维度大于 1920 x 1080 像素的图像将需要按比例较大的最小的人脸大小。
      * 可以提供不同的 detectionModel 值。 若要使用并比较了不同检测模型，请参阅[如何指定检测模型](https://docs.microsoft.com/en-us/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model)
      | 模型 | 建议使用-case(s) |
      | ---------- | -------- |
      | detection_01: | [人脸-默认检测模型
      Detect](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236)。 建议的正面人脸检测附近。 对于特别大角度 （头部姿势） 的人脸、 封闭的人脸或错误的图像方向的情况，可能检测这种情况下中的人脸。 | |detection_02: |2019 年发布的检测模型可能，尤其是在小型、 侧和模糊的人脸上的改进准确度。 |
      * 提供了不同 recognitionModel 值。 如果等跟进操作的验证，标识，查找类似需要，请使用 recognitionModel 参数指定的识别模型。 默认值为 recognitionModel 是 recognition_01，如果最新模型需要请显式指定所需的模型中此参数。 指定后，检测到的 faceIds 将与指定的识别模型相关联。 更多详细信息，请参阅[如何指定一个认证模型](https://docs.microsoft.com/en-us/azure/cognitive-services/face/face-api-how-to-topics/specify-recognition-model)
      | 模型 | 建议使用-case(s) |
      | ---------- | -------- |
      | recognition_01: | [人脸-默认识别模型
      Detect](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236)。 所有这些 faceIds 2019 年 3 月之前创建的是与此识别模型绑定。 | |recognition_02: |识别在 2019 年 3 月发布模型。 建议 recognition_02，因为其总体准确性得到了改进与 recognition_01 相比。 |
    syntax:
      content: 'function detectWithUrl(url: string, options?: Models.FaceDetectWithUrlOptionalParams)'
      parameters:
        - id: url
          type:
            - string
          description: 可公开访问的图像的 URL
        - id: options
          type:
            - Models.FaceDetectWithUrlOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.FaceDetectWithUrlResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.detectWithUrl_1'
    name: 'detectWithUrl(string, ServiceCallback<DetectedFace[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function detectWithUrl(url: string, callback: ServiceCallback<DetectedFace[]>)'
      parameters:
        - id: url
          type:
            - string
          description: 可公开访问的图像的 URL
        - id: callback
          type:
            - 'ServiceCallback<@azure/cognitiveservices-face.DetectedFace[]>'
          description: |
            回调
      return:
        type:
          - Promise<Models.FaceDetectWithUrlResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.constructor'
    name: Face(FaceClientContext)
    children: []
    type: constructor
    langs:
      - typeScript
    summary: 创建人脸。
    syntax:
      content: 'new Face(client: FaceClientContext)'
      parameters:
        - id: client
          type:
            - '@azure/cognitiveservices-face.FaceClientContext'
          description: |
            对服务客户端的引用。
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.findSimilar_2'
    name: 'findSimilar(string, FaceFindSimilarOptionalParams, ServiceCallback<SimilarFace[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function findSimilar(faceId: string, options: FaceFindSimilarOptionalParams, callback: ServiceCallback<SimilarFace[]>)'
      parameters:
        - id: faceId
          type:
            - string
          description: 其 FaceId 的查询人脸。 用户需要调用人脸-检测第一个要获取有效 faceId。 请注意，此 faceId 不会持久保留，并将在过期之后检测调用 24 小时
        - id: options
          type:
            - '@azure/cognitiveservices-face.FaceFindSimilarOptionalParams'
          description: 可选参数
        - id: callback
          type:
            - 'ServiceCallback<@azure/cognitiveservices-face.SimilarFace[]>'
          description: |
            回调
      return:
        type:
          - Promise<Models.FaceFindSimilarResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.findSimilar'
    name: 'findSimilar(string, Models.FaceFindSimilarOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      给定查询人脸的 faceId，用于在 faceId 数组、人脸列表或大型人脸列表中搜索类似的人脸。 faceId 数组包含创建的人脸[人脸-检测](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236)，这将过期创建后的 24 小时。 "FaceListId"创建由[FaceList-创建](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039524b)包含 persistedFaceIds 将不会过期。 和"largeFaceListId"创建由[大型人脸列表-创建](/docs/services/563879b61984550e40cbbe8d/operations/5a157b68d2de3616c086f2cc)包含 persistedFaceIds 将也不会过期。 根据输入返回相似的人脸列表包含 faceIds 或 persistedFaceIds 按相似性排名。
      <br/>查找类似具有两种工作模式、"matchPerson"和"matchFace"。 "matchPerson"是默认模式，它将尝试查找人脸的同一个人尽可能使用内部同人阈值。 它可用于查找其他人的照片的一个已知。 请注意，如果没有人脸都通过了内部阈值，将返回一个空列表。 "matchFace"模式忽略同人阈值，并返回仍要排名相似的人脸，甚至相似性较低。 它可以在类似于搜索名人的人脸的情况下使用。
      <br/>RecognitionModel' 与查询人脸的 faceId 关联应为 recognitionModel 目标 faceId 数组、 人脸列表或大型人脸列表使用的相同。
    syntax:
      content: 'function findSimilar(faceId: string, options?: Models.FaceFindSimilarOptionalParams)'
      parameters:
        - id: faceId
          type:
            - string
          description: 其 FaceId 的查询人脸。 用户需要调用人脸-检测第一个要获取有效 faceId。 请注意，此 faceId 不会持久保留，并将在过期之后检测调用 24 小时
        - id: options
          type:
            - Models.FaceFindSimilarOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.FaceFindSimilarResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.findSimilar_1'
    name: 'findSimilar(string, ServiceCallback<SimilarFace[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function findSimilar(faceId: string, callback: ServiceCallback<SimilarFace[]>)'
      parameters:
        - id: faceId
          type:
            - string
          description: 其 FaceId 的查询人脸。 用户需要调用人脸-检测第一个要获取有效 faceId。 请注意，此 faceId 不会持久保留，并将在过期之后检测调用 24 小时
        - id: callback
          type:
            - 'ServiceCallback<@azure/cognitiveservices-face.SimilarFace[]>'
          description: |
            回调
      return:
        type:
          - Promise<Models.FaceFindSimilarResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.group'
    name: 'group(string[], msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      根据人脸相似性将候选人脸划分为组。<br />
      * 输出是一个或多个不相互连接的人脸组和 messyGroup。 人脸组包含具有类似查找，通常的同一个人的人脸。 人脸组按组大小，即，人脸的数量进行排名。 请注意，人脸属于同一人可能会拆分成若干个组的结果。
      * MessyGroup 是包含找不到任何类似的与人脸，从原始的人脸的人脸的特殊的人脸组。 如果所有人脸找到它们的对应项，messyGroup 不会出现在结果。
      * 组 API 最多需要至少 2 个候选人脸和 1000 之间。 我们建议尝试[人脸-验证](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523a)只能有 2 个候选人脸。
      * 与查询人脸的 faceIds recognitionModel 应是相同的。
    syntax:
      content: 'function group(faceIds: string[], options?: msRest.RequestOptionsBase)'
      parameters:
        - id: faceIds
          type:
            - 'string[]'
          description: 候选 faceId 的数组创建的人脸-检测。 最大值是 1000年张人脸
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.FaceGroupResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.group_2'
    name: 'group(string[], RequestOptionsBase, ServiceCallback<GroupResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function group(faceIds: string[], options: RequestOptionsBase, callback: ServiceCallback<GroupResult>)'
      parameters:
        - id: faceIds
          type:
            - 'string[]'
          description: 候选 faceId 的数组创建的人脸-检测。 最大值是 1000年张人脸
        - id: options
          type:
            - RequestOptionsBase
          description: 可选参数
        - id: callback
          type:
            - ServiceCallback<@azure/cognitiveservices-face.GroupResult>
          description: |
            回调
      return:
        type:
          - Promise<Models.FaceGroupResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.group_1'
    name: 'group(string[], ServiceCallback<GroupResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function group(faceIds: string[], callback: ServiceCallback<GroupResult>)'
      parameters:
        - id: faceIds
          type:
            - 'string[]'
          description: 候选 faceId 的数组创建的人脸-检测。 最大值是 1000年张人脸
        - id: callback
          type:
            - ServiceCallback<@azure/cognitiveservices-face.GroupResult>
          description: |
            回调
      return:
        type:
          - Promise<Models.FaceGroupResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.identify_2'
    name: 'identify(string[], FaceIdentifyOptionalParams, ServiceCallback<IdentifyResult[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function identify(faceIds: string[], options: FaceIdentifyOptionalParams, callback: ServiceCallback<IdentifyResult[]>)'
      parameters:
        - id: faceIds
          type:
            - 'string[]'
          description: '查询的数组的人脸 faceIds，创建的人脸-检测。 人脸的每个单独进行标识。 有效的 faceIds 数之间是 [1，10]。'
        - id: options
          type:
            - '@azure/cognitiveservices-face.FaceIdentifyOptionalParams'
          description: 可选参数
        - id: callback
          type:
            - 'ServiceCallback<@azure/cognitiveservices-face.IdentifyResult[]>'
          description: |
            回调
      return:
        type:
          - Promise<Models.FaceIdentifyResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.identify'
    name: 'identify(string[], Models.FaceIdentifyOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      一对多的识别，用于在人员组或大型人员组中查找与特定查询人脸最接近的匹配项。
      <br/> FaceIds 数组中的每张人脸，人脸识别将计算查询人脸和人员组 （如果有通过 personGroupId） 中的所有人脸之间的相似之处或大型用户组 （由 largePersonGroupId 给定），并返回候选项排名该人脸的人员通过相似性置信度。 应培训人员大型组/用户组，以使其准备好进行标识。 请参阅中的详细信息[person Group-Train](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395249)并[大型人物组-训练](/docs/services/563879b61984550e40cbbe8d/operations/599ae2d16ac60f11b48b5aa4)。
      <br/>
      备注：<br />
      * 该算法允许多个人脸，若要在同一个请求时，独立标识但不是超过 10 人脸。
      * 在人员组/大型用户组中的每个人都可以有多个人脸，但不是能超过 248 人脸。
      * 人脸图像质量更高意味着更好地标识精度。 请考虑高质量的人脸： 正面、 clear 和人脸大小为 200 x 200 像素 （100 个像素之间的眼睛） 或更大。
      * 返回的候选项的数目受到限制，maxNumOfCandidatesReturned 和 confidenceThreshold。 如果确定没有人，返回的候选项将是空数组。
      * 请尝试[人脸-查找相似](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237)何时需要查找相似人脸从人脸列表/大型人脸列表而不是人员大型组/用户组。
      * RecognitionModel' 与查询人脸的 faceIds 关联应为 recognitionModel 目标人员组或大型用户组使用的相同。
    syntax:
      content: 'function identify(faceIds: string[], options?: Models.FaceIdentifyOptionalParams)'
      parameters:
        - id: faceIds
          type:
            - 'string[]'
          description: '查询的数组的人脸 faceIds，创建的人脸-检测。 人脸的每个单独进行标识。 有效的 faceIds 数之间是 [1，10]。'
        - id: options
          type:
            - Models.FaceIdentifyOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.FaceIdentifyResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.identify_1'
    name: 'identify(string[], ServiceCallback<IdentifyResult[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function identify(faceIds: string[], callback: ServiceCallback<IdentifyResult[]>)'
      parameters:
        - id: faceIds
          type:
            - 'string[]'
          description: '查询的数组的人脸 faceIds，创建的人脸-检测。 人脸的每个单独进行标识。 有效的 faceIds 数之间是 [1，10]。'
        - id: callback
          type:
            - 'ServiceCallback<@azure/cognitiveservices-face.IdentifyResult[]>'
          description: |
            回调
      return:
        type:
          - Promise<Models.FaceIdentifyResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.verifyFaceToFace'
    name: 'verifyFaceToFace(string, string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      验证两张人脸是否属于同一个人，或者一张人脸是否属于某一个人。
      <br/>
      备注：<br />
      * 人脸图像质量更高意味着更好地标识精度。 请考虑高质量的人脸： 正面、 clear 和人脸大小为 200 x 200 像素 （100 个像素之间的眼睛） 或更大。
      * 准确性对敏感的方案，请您自己的判断。
      * 与查询人脸的 faceIds recognitionModel 应与目标人脸、 人员组或大型用户组使用的 recognitionModel 相同。
    syntax:
      content: 'function verifyFaceToFace(faceId1: string, faceId2: string, options?: msRest.RequestOptionsBase)'
      parameters:
        - id: faceId1
          type:
            - string
          description: 第一个人脸，faceId 来自人脸-检测
        - id: faceId2
          type:
            - string
          description: 第二个人脸，faceId 来自人脸-检测
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.FaceVerifyFaceToFaceResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.verifyFaceToFace_2'
    name: 'verifyFaceToFace(string, string, RequestOptionsBase, ServiceCallback<VerifyResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function verifyFaceToFace(faceId1: string, faceId2: string, options: RequestOptionsBase, callback: ServiceCallback<VerifyResult>)'
      parameters:
        - id: faceId1
          type:
            - string
          description: 第一个人脸，faceId 来自人脸-检测
        - id: faceId2
          type:
            - string
          description: 第二个人脸，faceId 来自人脸-检测
        - id: options
          type:
            - RequestOptionsBase
          description: 可选参数
        - id: callback
          type:
            - ServiceCallback<@azure/cognitiveservices-face.VerifyResult>
          description: |
            回调
      return:
        type:
          - Promise<Models.FaceVerifyFaceToFaceResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.verifyFaceToFace_1'
    name: 'verifyFaceToFace(string, string, ServiceCallback<VerifyResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function verifyFaceToFace(faceId1: string, faceId2: string, callback: ServiceCallback<VerifyResult>)'
      parameters:
        - id: faceId1
          type:
            - string
          description: 第一个人脸，faceId 来自人脸-检测
        - id: faceId2
          type:
            - string
          description: 第二个人脸，faceId 来自人脸-检测
        - id: callback
          type:
            - ServiceCallback<@azure/cognitiveservices-face.VerifyResult>
          description: |
            回调
      return:
        type:
          - Promise<Models.FaceVerifyFaceToFaceResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.verifyFaceToPerson_2'
    name: 'verifyFaceToPerson(string, string, FaceVerifyFaceToPersonOptionalParams, ServiceCallback<VerifyResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function verifyFaceToPerson(faceId: string, personId: string, options: FaceVerifyFaceToPersonOptionalParams, callback: ServiceCallback<VerifyResult>)'
      parameters:
        - id: faceId
          type:
            - string
          description: 人脸，FaceId 来自人脸-检测
        - id: personId
          type:
            - string
          description: 人员组或大型用户组中指定了某个人。 personId 创建亲自 person Group-创建或大型人物组人员-创建。
        - id: options
          type:
            - '@azure/cognitiveservices-face.FaceVerifyFaceToPersonOptionalParams'
          description: 可选参数
        - id: callback
          type:
            - ServiceCallback<@azure/cognitiveservices-face.VerifyResult>
          description: |
            回调
      return:
        type:
          - Promise<Models.FaceVerifyFaceToPersonResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.verifyFaceToPerson'
    name: 'verifyFaceToPerson(string, string, Models.FaceVerifyFaceToPersonOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 验证两张脸是否属于同一个人。 将人脸 Id 人员 Id 进行比较
    syntax:
      content: 'function verifyFaceToPerson(faceId: string, personId: string, options?: Models.FaceVerifyFaceToPersonOptionalParams)'
      parameters:
        - id: faceId
          type:
            - string
          description: 人脸，FaceId 来自人脸-检测
        - id: personId
          type:
            - string
          description: 人员组或大型用户组中指定了某个人。 personId 创建亲自 person Group-创建或大型人物组人员-创建。
        - id: options
          type:
            - Models.FaceVerifyFaceToPersonOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.FaceVerifyFaceToPersonResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.verifyFaceToPerson_1'
    name: 'verifyFaceToPerson(string, string, ServiceCallback<VerifyResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function verifyFaceToPerson(faceId: string, personId: string, callback: ServiceCallback<VerifyResult>)'
      parameters:
        - id: faceId
          type:
            - string
          description: 人脸，FaceId 来自人脸-检测
        - id: personId
          type:
            - string
          description: 人员组或大型用户组中指定了某个人。 personId 创建亲自 person Group-创建或大型人物组人员-创建。
        - id: callback
          type:
            - ServiceCallback<@azure/cognitiveservices-face.VerifyResult>
          description: |
            回调
      return:
        type:
          - Promise<Models.FaceVerifyFaceToPersonResponse>
    package: '@azure/cognitiveservices-face'
references:
  - uid: '@azure/cognitiveservices-face.FaceClientContext'
    name: FaceClientContext
    spec.typeScript:
      - name: FaceClientContext
        fullName: FaceClientContext
        uid: '@azure/cognitiveservices-face.FaceClientContext'
  - uid: 'ServiceCallback<@azure/cognitiveservices-face.DetectedFace[]>'
    name: 'DetectedFace[]>'
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: DetectedFace
        fullName: DetectedFace
        uid: '@azure/cognitiveservices-face.DetectedFace'
      - name: '[]>'
        fullName: '[]>'
  - uid: '@azure/cognitiveservices-face.FaceDetectWithStreamOptionalParams'
    name: FaceDetectWithStreamOptionalParams
    spec.typeScript:
      - name: FaceDetectWithStreamOptionalParams
        fullName: FaceDetectWithStreamOptionalParams
        uid: '@azure/cognitiveservices-face.FaceDetectWithStreamOptionalParams'
  - uid: '@azure/cognitiveservices-face.FaceDetectWithUrlOptionalParams'
    name: FaceDetectWithUrlOptionalParams
    spec.typeScript:
      - name: FaceDetectWithUrlOptionalParams
        fullName: FaceDetectWithUrlOptionalParams
        uid: '@azure/cognitiveservices-face.FaceDetectWithUrlOptionalParams'
  - uid: 'ServiceCallback<@azure/cognitiveservices-face.SimilarFace[]>'
    name: 'SimilarFace[]>'
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: SimilarFace
        fullName: SimilarFace
        uid: '@azure/cognitiveservices-face.SimilarFace'
      - name: '[]>'
        fullName: '[]>'
  - uid: '@azure/cognitiveservices-face.FaceFindSimilarOptionalParams'
    name: FaceFindSimilarOptionalParams
    spec.typeScript:
      - name: FaceFindSimilarOptionalParams
        fullName: FaceFindSimilarOptionalParams
        uid: '@azure/cognitiveservices-face.FaceFindSimilarOptionalParams'
  - uid: ServiceCallback<@azure/cognitiveservices-face.GroupResult>
    name: GroupResult>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: GroupResult
        fullName: GroupResult
        uid: '@azure/cognitiveservices-face.GroupResult'
      - name: '>'
        fullName: '>'
  - uid: 'ServiceCallback<@azure/cognitiveservices-face.IdentifyResult[]>'
    name: 'IdentifyResult[]>'
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: IdentifyResult
        fullName: IdentifyResult
        uid: '@azure/cognitiveservices-face.IdentifyResult'
      - name: '[]>'
        fullName: '[]>'
  - uid: '@azure/cognitiveservices-face.FaceIdentifyOptionalParams'
    name: FaceIdentifyOptionalParams
    spec.typeScript:
      - name: FaceIdentifyOptionalParams
        fullName: FaceIdentifyOptionalParams
        uid: '@azure/cognitiveservices-face.FaceIdentifyOptionalParams'
  - uid: ServiceCallback<@azure/cognitiveservices-face.VerifyResult>
    name: VerifyResult>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: VerifyResult
        fullName: VerifyResult
        uid: '@azure/cognitiveservices-face.VerifyResult'
      - name: '>'
        fullName: '>'
  - uid: '@azure/cognitiveservices-face.FaceVerifyFaceToPersonOptionalParams'
    name: FaceVerifyFaceToPersonOptionalParams
    spec.typeScript:
      - name: FaceVerifyFaceToPersonOptionalParams
        fullName: FaceVerifyFaceToPersonOptionalParams
        uid: '@azure/cognitiveservices-face.FaceVerifyFaceToPersonOptionalParams'