### YamlMime:UniversalReference
ms.openlocfilehash: 1aa6f8d573fc6248e534db33c9d88b9d44b294c6
ms.sourcegitcommit: 286f52ea38c9eff2ec9d4f8cabeb86f62fd9c406
ms.translationtype: MT
ms.contentlocale: zh-CN
ms.lasthandoff: 08/22/2018
ms.locfileid: "41702346"
items:
- uid: '@azure/cosmos.Containers'
  name: Containers
  fullName: Containers
  children:
  - '@azure/cosmos.Containers.constructor'
  - '@azure/cosmos.Containers.create'
  - '@azure/cosmos.Containers.createIfNotExists'
  - '@azure/cosmos.Containers.database'
  - '@azure/cosmos.Containers.query'
  - '@azure/cosmos.Containers.readAll'
  langs:
  - typeScript
  type: class
  summary: 用于创建新容器和读取/查询所有容器操作
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Containers.constructor'
  name: Containers
  children: []
  type: constructor
  langs:
  - typeScript
  summary: ''
  syntax:
    content: 'new Containers(database: Database, clientContext: ClientContext)'
    parameters:
    - id: database
      type:
      - '@azure/cosmos.Database'
      description: ''
    - id: clientContext
      type:
      - ClientContext
      description: ''
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Containers.create'
  name: create
  children: []
  type: method
  langs:
  - typeScript
  summary: >
    创建一个容器。

    容器是一个命名的项的逻辑容器。


    数据库可能包含零个或多个命名的容器，每个容器包含零个或多个 JSON 项。


    是架构自由，在容器中的项不需要共享相同的结构或字段。



    由于容器应用程序资源，他们可以被授权使用主密钥或资源键。
  syntax:
    content: 'function create(body: ContainerDefinition, options?: RequestOptions)'
    parameters:
    - id: body
      type:
      - '@azure/cosmos.ContainerDefinition'
      description: 表示容器的正文。
    - id: options
      type:
      - '@azure/cosmos.RequestOptions'
      description: >
        用于设置选项，如响应页面大小、 继续标记，等等。
      optional: true
    return:
      type:
      - Promise<@azure/cosmos.ContainerResponse>
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Containers.createIfNotExists'
  name: createIfNotExists
  children: []
  type: method
  langs:
  - typeScript
  summary: >
    如果容器存在，并且，如果它不存在，将创建该检查。

    这将使基于中的 id 的读取的操作`body`，如果它找不到，创建操作。

    您应确认输出与的正文中传递的非默认属性 （即索引策略等。）容器是一个命名的项的逻辑容器。


    数据库可能包含零个或多个命名的容器，每个容器包含零个或多个 JSON 项。


    是架构自由，在容器中的项不需要共享相同的结构或字段。



    由于容器应用程序资源，他们可以被授权使用主密钥或资源键。
  syntax:
    content: 'function createIfNotExists(body: ContainerDefinition, options?: RequestOptions)'
    parameters:
    - id: body
      type:
      - '@azure/cosmos.ContainerDefinition'
      description: 表示容器的正文。
    - id: options
      type:
      - '@azure/cosmos.RequestOptions'
      description: >
        用于设置选项，如响应页面大小、 继续标记，等等。
      optional: true
    return:
      type:
      - Promise<@azure/cosmos.ContainerResponse>
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Containers.database'
  name: database
  fullName: database
  children: []
  langs:
  - typeScript
  type: property
  summary: ''
  syntax:
    content: 'database: Database'
    return:
      type:
      - '@azure/cosmos.Database'
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Containers.query'
  name: query
  children: []
  type: method
  langs:
  - typeScript
  summary: 查询所有容器。
  syntax:
    content: 'function query(query: SqlQuerySpec, options?: FeedOptions)'
    parameters:
    - id: query
      type:
      - '@azure/cosmos.SqlQuerySpec'
      description: 查询操作的配置。 请参阅<xref:SqlQuerySpec>有关如何配置查询的详细信息。
    - id: options
      type:
      - '@azure/cosmos.FeedOptions'
      description: 用于设置选项，如响应页面大小、 继续标记，等等。
      optional: true
    return:
      type:
      - '@azure/cosmos.QueryIterator<@azure/cosmos.ContainerDefinition>'
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Containers.readAll'
  name: readAll
  children: []
  type: method
  langs:
  - typeScript
  summary: 读取所有容器。
  syntax:
    content: 'function readAll(options?: FeedOptions)'
    parameters:
    - id: options
      type:
      - '@azure/cosmos.FeedOptions'
      description: 用于设置选项，如响应页面大小、 继续标记，等等。
      optional: true
    return:
      type:
      - '@azure/cosmos.QueryIterator<@azure/cosmos.ContainerDefinition>'
  package: '@azure/cosmos'
references:
- uid: '@azure/cosmos.Database'
  spec.typeScript:
  - name: Database
    fullName: Database
    uid: '@azure/cosmos.Database'
- uid: '@azure/cosmos.ContainerDefinition'
  spec.typeScript:
  - name: ContainerDefinition
    fullName: ContainerDefinition
    uid: '@azure/cosmos.ContainerDefinition'
- uid: '@azure/cosmos.RequestOptions'
  spec.typeScript:
  - name: RequestOptions
    fullName: RequestOptions
    uid: '@azure/cosmos.RequestOptions'
- uid: Promise<@azure/cosmos.ContainerResponse>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: ContainerResponse
    fullName: ContainerResponse
    uid: '@azure/cosmos.ContainerResponse'
  - name: '>'
    fullName: '>'
- uid: '@azure/cosmos.SqlQuerySpec'
  spec.typeScript:
  - name: SqlQuerySpec
    fullName: SqlQuerySpec
    uid: '@azure/cosmos.SqlQuerySpec'
- uid: '@azure/cosmos.FeedOptions'
  spec.typeScript:
  - name: FeedOptions
    fullName: FeedOptions
    uid: '@azure/cosmos.FeedOptions'
- uid: '@azure/cosmos.QueryIterator<@azure/cosmos.ContainerDefinition>'
  spec.typeScript:
  - name: QueryIterator
    fullName: QueryIterator
    uid: '@azure/cosmos.QueryIterator'
  - name: <
    fullName: <
  - name: ContainerDefinition
    fullName: ContainerDefinition
    uid: '@azure/cosmos.ContainerDefinition'
  - name: '>'
    fullName: '>'
