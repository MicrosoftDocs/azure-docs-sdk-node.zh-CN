### YamlMime:UniversalReference
ms.openlocfilehash: 70f7fdced044f28d0c42ea199dc464034747e39c
ms.sourcegitcommit: 286f52ea38c9eff2ec9d4f8cabeb86f62fd9c406
ms.translationtype: MT
ms.contentlocale: zh-CN
ms.lasthandoff: 08/22/2018
ms.locfileid: "41476668"
items:
- uid: azure-iot-device.ModuleClient
  name: ModuleClient
  fullName: ModuleClient
  children:
  - azure-iot-device.ModuleClient.close
  - azure-iot-device.ModuleClient.fromAuthenticationProvider
  - azure-iot-device.ModuleClient.fromConnectionString
  - azure-iot-device.ModuleClient.fromEnvironment
  - azure-iot-device.ModuleClient.fromSharedAccessSignature
  - azure-iot-device.ModuleClient.invokeMethod
  - azure-iot-device.ModuleClient.invokeMethod_1
  - azure-iot-device.ModuleClient.onMethod
  - azure-iot-device.ModuleClient.sendOutputEvent
  - azure-iot-device.ModuleClient.sendOutputEventBatch
  - azure-iot-device.ModuleClient.setOptions
  langs:
  - typeScript
  type: class
  summary: >
    IoT 中心设备客户端用来与 Azure IoT 中心连接设备。

    SDK 的用户应在调用工厂方法之一[fromConnectionString](xref:azure-iot-device.Client.fromConnectionString)或[fromSharedAccessSignature](xref:azure-iot-device.Client.fromSharedAccessSignature)创建 IoT 中心设备客户端。
  extends:
    name: InternalClient
  package: azure-iot-device
- uid: azure-iot-device.ModuleClient.close
  name: close
  children: []
  type: method
  langs:
  - typeScript
  summary: >
    关闭传输连接并销毁的客户端资源。

    *注意： 调用此方法 ModuleClient 后对象不能重复使用。*
  syntax:
    content: 'function close(closeCallback?: (err?: Error, result?: Disconnected) => void)'
    parameters:
    - id: closeCallback
      type:
      - '(err?: Error, result?: Disconnected) => void'
      description: >
        传输已断开连接后调用的函数和客户端已关闭。
      optional: true
  package: azure-iot-device
- uid: azure-iot-device.ModuleClient.fromAuthenticationProvider
  name: fromAuthenticationProvider
  children: []
  type: method
  langs:
  - typeScript
  summary: 从给定的身份验证方法，并使用给定的传输类型创建的 IoT 中心模块客户端。
  syntax:
    content: 'static function fromAuthenticationProvider(authenticationProvider: AuthenticationProvider, transportCtor: any)'
    parameters:
    - id: authenticationProvider
      type:
      - AuthenticationProvider
      description: 用于获取 IoT 中心的身份验证参数的对象。
    - id: transportCtor
      type:
      - any
      description: >
        传输协议用于连接到 IoT 中心。
    return:
      type:
      - any
  package: azure-iot-device
- uid: azure-iot-device.ModuleClient.fromConnectionString
  name: fromConnectionString
  children: []
  type: method
  langs:
  - typeScript
  summary: 从给定的连接字符串使用给定的传输类型创建 IoT 中心设备客户端。
  syntax:
    content: 'static function fromConnectionString(connStr: string, transportCtor: any)'
    parameters:
    - id: connStr
      type:
      - string
      description: 连接字符串，其中封装一个 IoT 中心的"设备连接"权限。
    - id: transportCtor
      type:
      - any
      description: >
        传输的构造函数。
    return:
      type:
      - azure-iot-device.ModuleClient
  package: azure-iot-device
- uid: azure-iot-device.ModuleClient.fromEnvironment
  name: fromEnvironment
  children: []
  type: method
  langs:
  - typeScript
  summary: >
    通过在环境中的配置信息来创建 IoT 中心模块客户端。

    如果环境变量调用`EdgeHubConnectionString`或`IotHubConnectionString`存在，则使用该值和行为等同于调用`fromConnectionString`传递的中。 如果不存在这些环境变量，则必须定义以下变量：

        - IOTEDGE_WORKLOADURI iotedged 的工作负荷 API 的 URI
        - IOTEDGE_DEVICEID 设备标识符
        - IOTEDGE_MODULEID 模块标识符
        - IOTEDGE_MODULEGENERATIONID 模块生成标识符
        - IOTEDGE_IOTHUBHOSTNAME IoT 中心主机名
        - 用于; IOTEDGE_AUTHSCHEME 身份验证方案必须是"sasToken"
  syntax:
    content: 'static function fromEnvironment(transportCtor: any, callback: (err?: Error, client?: ModuleClient) => void)'
    parameters:
    - id: transportCtor
      type:
      - any
      description: 传输协议用于连接到 IoT 中心。
    - id: callback
      type:
      - '(err?: Error, client?: ModuleClient) => void'
      description: >
        要调用 ModuleClient 后 constructured 或出错时创建客户端的回调。
  package: azure-iot-device
- uid: azure-iot-device.ModuleClient.fromSharedAccessSignature
  name: fromSharedAccessSignature
  children: []
  type: method
  langs:
  - typeScript
  summary: 从给定的共享的访问签名使用给定的传输类型创建的 IoT 中心模块客户端。
  syntax:
    content: 'static function fromSharedAccessSignature(sharedAccessSignature: string, transportCtor: any)'
    parameters:
    - id: sharedAccessSignature
      type:
      - string
      description: 共享的访问签名，其中封装一个 IoT 中心的"设备连接"权限。
    - id: transportCtor
      type:
      - any
      description: ''
    return:
      type:
      - any
  package: azure-iot-device
- uid: azure-iot-device.ModuleClient.invokeMethod
  name: invokeMethod
  children: []
  type: method
  langs:
  - typeScript
  summary: 调用下游设备上或在同一边缘设备上的另一个模块的方法。 请注意，此功能仅适用时运行该模块的一部分的边缘设备。
  syntax:
    content: 'function invokeMethod(deviceId: string, methodParams: MethodParams, callback: MethodCallback)'
    parameters:
    - id: deviceId
      type:
      - string
      description: 目标设备标识符
    - id: methodParams
      type:
      - azure-iot-device.MethodParams
      description: 直接方法调用的参数
    - id: callback
      type:
      - azure-iot-device.MethodCallback
      description: >
        使用错误对象或方法调用的结果将调用的回调。
  package: azure-iot-device
- uid: azure-iot-device.ModuleClient.invokeMethod_1
  name: invokeMethod
  children: []
  type: method
  langs:
  - typeScript
  summary: 调用下游设备上或在同一边缘设备上的另一个模块的方法。 请注意，此功能仅适用时运行该模块的一部分的边缘设备。
  syntax:
    content: 'function invokeMethod(deviceId: string, moduleId: string, methodParams: MethodParams, callback: MethodCallback)'
    parameters:
    - id: deviceId
      type:
      - string
      description: ''
    - id: moduleId
      type:
      - string
      description: ''
    - id: methodParams
      type:
      - azure-iot-device.MethodParams
      description: ''
    - id: callback
      type:
      - azure-iot-device.MethodCallback
      description: ''
  package: azure-iot-device
- uid: azure-iot-device.ModuleClient.onMethod
  name: onMethod
  children: []
  type: method
  langs:
  - typeScript
  summary: 注册一个名为方法的回调`methodName`。
  syntax:
    content: 'function onMethod(methodName: string, callback: (request: DeviceMethodRequest, response: DeviceMethodResponse) => void)'
    parameters:
    - id: methodName
      type:
      - string
      description: 将处理由回调的方法名称
    - id: callback
      type:
      - '(request: DeviceMethodRequest, response: DeviceMethodResponse) => void'
      description: >
        每次调用该方法的方法请求时应被调用的函数`methodName`收到。
  package: azure-iot-device
- uid: azure-iot-device.ModuleClient.sendOutputEvent
  name: sendOutputEvent
  children: []
  type: method
  langs:
  - typeScript
  summary: 将事件发送到给定的模块输出
  syntax:
    content: 'function sendOutputEvent(outputName: string, message: Message, callback: (err?: Error, result?: MessageEnqueued) => void)'
    parameters:
    - id: outputName
      type:
      - string
      description: 输出将发送到事件的名称
    - id: message
      type:
      - Message
      description: 要发送到给定的输出消息
    - id: callback
      type:
      - '(err?: Error, result?: MessageEnqueued) => void'
      description: >
        该操作已排入队列时要调用的函数。
  package: azure-iot-device
- uid: azure-iot-device.ModuleClient.sendOutputEventBatch
  name: sendOutputEventBatch
  children: []
  type: method
  langs:
  - typeScript
  summary: 将事件的数组发送到给定的模块输出
  syntax:
    content: 'function sendOutputEventBatch(outputName: string, messages: Message[], callback: (err?: Error, result?: MessageEnqueued) => void)'
    parameters:
    - id: outputName
      type:
      - string
      description: 输出将发送到事件的名称
    - id: messages
      type:
      - Message[]
      description: ''
    - id: callback
      type:
      - '(err?: Error, result?: MessageEnqueued) => void'
      description: >
        已排队操作时要调用的函数。
  package: azure-iot-device
- uid: azure-iot-device.ModuleClient.setOptions
  name: setOptions
  children: []
  type: method
  langs:
  - typeScript
  summary: 将传递到选项`ModuleClient`可用于配置传输的对象。
  syntax:
    content: 'function setOptions(options: DeviceClientOptions, done?: (err?: Error, result?: TransportConfigured) => void)'
    parameters:
    - id: options
      type:
      - azure-iot-device.DeviceClientOptions
      description: 一个<xref:DeviceClientOptions>对象。
    - id: done
      type:
      - '(err?: Error, result?: TransportConfigured) => void'
      description: >
        要设置选项后调用的回调。
      optional: true
  package: azure-iot-device
references:
- uid: azure-iot-device.MethodParams
  spec.typeScript:
  - name: MethodParams
    fullName: MethodParams
    uid: azure-iot-device.MethodParams
- uid: azure-iot-device.MethodCallback
  spec.typeScript:
  - name: MethodCallback
    fullName: MethodCallback
    uid: azure-iot-device.MethodCallback
- uid: azure-iot-device.DeviceClientOptions
  spec.typeScript:
  - name: DeviceClientOptions
    fullName: DeviceClientOptions
    uid: azure-iot-device.DeviceClientOptions
- uid: azure-iot-device.ModuleClient
  spec.typeScript:
  - name: ModuleClient
    fullName: ModuleClient
    uid: azure-iot-device.ModuleClient
