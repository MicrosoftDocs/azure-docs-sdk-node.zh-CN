### YamlMime:UniversalReference
ms.openlocfilehash: 56789ebeca7ab18b9af71b968096cbb2061fddb9
ms.sourcegitcommit: 286f52ea38c9eff2ec9d4f8cabeb86f62fd9c406
ms.translationtype: MT
ms.contentlocale: zh-CN
ms.lasthandoff: 08/22/2018
ms.locfileid: "41691156"
items:
- uid: '@azure/cosmos.Databases'
  name: Databases
  fullName: Databases
  children:
  - '@azure/cosmos.Databases.create'
  - '@azure/cosmos.Databases.createIfNotExists'
  - '@azure/cosmos.Databases.constructor'
  - '@azure/cosmos.Databases.query'
  - '@azure/cosmos.Databases.readAll'
  langs:
  - typeScript
  type: class
  summary: <span data-ttu-id="1b674-101">用于创建新数据库和读取/查询的所有数据库操作</span><span class="sxs-lookup"><span data-stu-id="1b674-101">Operations for creating new databases, and reading/querying all databases</span></span>
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Databases.create'
  name: create
  children: []
  type: method
  langs:
  - typeScript
  summary: >
    <span data-ttu-id="1b674-102">发送请求用于创建数据库。</span><span class="sxs-lookup"><span data-stu-id="1b674-102">Send a request for creating a database.</span></span>

    <span data-ttu-id="1b674-103">数据库管理用户、 权限和一组的容器。</span><span class="sxs-lookup"><span data-stu-id="1b674-103">A database manages users, permissions and a set of containers.</span></span>

    <span data-ttu-id="1b674-104">每个 Azure Cosmos DB 数据库帐户是能够支持多个独立的命名数据库，使用的数据库的数据的逻辑容器。</span><span class="sxs-lookup"><span data-stu-id="1b674-104">Each Azure Cosmos DB Database Account is able to support multiple independent named databases, with the database being the logical container for data.</span></span>


    <span data-ttu-id="1b674-105">每个数据库包含的一个或多个容器，其中每个又包含一个或多个文档。</span><span class="sxs-lookup"><span data-stu-id="1b674-105">Each Database consists of one or more containers, each of which in turn contain one or more documents.</span></span> <span data-ttu-id="1b674-106">由于数据库是一种管理资源，Service Master Key 将要求才能访问和成功完成使用用户 Api 的任何操作。</span><span class="sxs-lookup"><span data-stu-id="1b674-106">Since databases are an an administrative resource, the Service Master Key will be required in order to access and successfully complete any action using the User APIs.</span></span>
  syntax:
    content: 'function create(body: DatabaseDefinition, options?: RequestOptions)'
    parameters:
    - id: body
      type:
      - '@azure/cosmos.DatabaseDefinition'
      description: <span data-ttu-id="1b674-107"><xref:DatabaseDefinition> ，它表示<xref:Database>创建。</span><span class="sxs-lookup"><span data-stu-id="1b674-107">The <xref:DatabaseDefinition> that represents the <xref:Database> to be created.</span></span>
    - id: options
      type:
      - '@azure/cosmos.RequestOptions'
      description: >
        <span data-ttu-id="1b674-108">用于设置选项，如响应页面大小、 继续标记，等等。</span><span class="sxs-lookup"><span data-stu-id="1b674-108">Use to set options like response page size, continuation tokens, etc.</span></span>
      optional: true
    return:
      type:
      - Promise<@azure/cosmos.DatabaseResponse>
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Databases.createIfNotExists'
  name: createIfNotExists
  children: []
  type: method
  langs:
  - typeScript
  summary: >
    <span data-ttu-id="1b674-109">检查是否存在的数据库，并不会创建它。</span><span class="sxs-lookup"><span data-stu-id="1b674-109">Check if a database exists, and if it doesn't, create it.</span></span>

    <span data-ttu-id="1b674-110">这将使基于中的 id 的读取的操作`body`，如果它找不到，创建操作。</span><span class="sxs-lookup"><span data-stu-id="1b674-110">This will make a read operation based on the id in the `body`, then if it is not found, a create operation.</span></span>

    <span data-ttu-id="1b674-111">数据库管理用户、 权限和一组的容器。</span><span class="sxs-lookup"><span data-stu-id="1b674-111">A database manages users, permissions and a set of containers.</span></span>

    <span data-ttu-id="1b674-112">每个 Azure Cosmos DB 数据库帐户是能够支持多个独立的命名数据库，使用的数据库的数据的逻辑容器。</span><span class="sxs-lookup"><span data-stu-id="1b674-112">Each Azure Cosmos DB Database Account is able to support multiple independent named databases, with the database being the logical container for data.</span></span>


    <span data-ttu-id="1b674-113">每个数据库包含的一个或多个容器，其中每个又包含一个或多个文档。</span><span class="sxs-lookup"><span data-stu-id="1b674-113">Each Database consists of one or more containers, each of which in turn contain one or more documents.</span></span> <span data-ttu-id="1b674-114">由于数据库是一种管理资源，Service Master Key 将要求才能访问和成功完成使用用户 Api 的任何操作。</span><span class="sxs-lookup"><span data-stu-id="1b674-114">Since databases are an an administrative resource, the Service Master Key will be required in order to access and successfully complete any action using the User APIs.</span></span>
  syntax:
    content: 'function createIfNotExists(body: DatabaseDefinition, options?: RequestOptions)'
    parameters:
    - id: body
      type:
      - '@azure/cosmos.DatabaseDefinition'
      description: <span data-ttu-id="1b674-115"><xref:DatabaseDefinition> ，它表示<xref:Database>创建。</span><span class="sxs-lookup"><span data-stu-id="1b674-115">The <xref:DatabaseDefinition> that represents the <xref:Database> to be created.</span></span>
    - id: options
      type:
      - '@azure/cosmos.RequestOptions'
      description: "\n"
      optional: true
    return:
      type:
      - Promise<@azure/cosmos.DatabaseResponse>
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Databases.constructor'
  name: Databases
  children: []
  type: constructor
  langs:
  - typeScript
  summary: ''
  syntax:
    content: 'new Databases(client: CosmosClient, clientContext: ClientContext)'
    parameters:
    - id: client
      type:
      - '@azure/cosmos.CosmosClient'
      description: ''
    - id: clientContext
      type:
      - ClientContext
      description: ''
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Databases.query'
  name: query
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="1b674-116">查询所有数据库。</span><span class="sxs-lookup"><span data-stu-id="1b674-116">Queries all databases.</span></span>
  syntax:
    content: 'function query(query: string | SqlQuerySpec, options?: FeedOptions)'
    parameters:
    - id: query
      type:
      - string | @azure/cosmos.SqlQuerySpec
      description: <span data-ttu-id="1b674-117">查询操作的配置。</span><span class="sxs-lookup"><span data-stu-id="1b674-117">Query configuration for the operation.</span></span> <span data-ttu-id="1b674-118">请参阅<xref:SqlQuerySpec>有关如何配置查询的详细信息。</span><span class="sxs-lookup"><span data-stu-id="1b674-118">See <xref:SqlQuerySpec> for more info on how to configure a query.</span></span>
    - id: options
      type:
      - '@azure/cosmos.FeedOptions'
      description: <span data-ttu-id="1b674-119">用于设置选项，如响应页面大小、 继续标记，等等。</span><span class="sxs-lookup"><span data-stu-id="1b674-119">Use to set options like response page size, continuation tokens, etc.</span></span>
      optional: true
    return:
      type:
      - '@azure/cosmos.QueryIterator<@azure/cosmos.DatabaseDefinition>'
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Databases.readAll'
  name: readAll
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="1b674-120">读取所有数据库。</span><span class="sxs-lookup"><span data-stu-id="1b674-120">Reads all databases.</span></span>
  syntax:
    content: 'function readAll(options?: FeedOptions)'
    parameters:
    - id: options
      type:
      - '@azure/cosmos.FeedOptions'
      description: <span data-ttu-id="1b674-121">用于设置选项，如响应页面大小、 继续标记，等等。</span><span class="sxs-lookup"><span data-stu-id="1b674-121">Use to set options like response page size, continuation tokens, etc.</span></span>
      optional: true
    return:
      type:
      - '@azure/cosmos.QueryIterator<@azure/cosmos.DatabaseDefinition>'
  package: '@azure/cosmos'
references:
- uid: '@azure/cosmos.CosmosClient'
  spec.typeScript:
  - name: CosmosClient
    fullName: CosmosClient
    uid: '@azure/cosmos.CosmosClient'
- uid: '@azure/cosmos.DatabaseDefinition'
  spec.typeScript:
  - name: DatabaseDefinition
    fullName: DatabaseDefinition
    uid: '@azure/cosmos.DatabaseDefinition'
- uid: '@azure/cosmos.RequestOptions'
  spec.typeScript:
  - name: RequestOptions
    fullName: RequestOptions
    uid: '@azure/cosmos.RequestOptions'
- uid: Promise<@azure/cosmos.DatabaseResponse>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: DatabaseResponse
    fullName: DatabaseResponse
    uid: '@azure/cosmos.DatabaseResponse'
  - name: '>'
    fullName: '>'
- uid: string | @azure/cosmos.SqlQuerySpec
  spec.typeScript:
  - name: 'string | '
    fullName: 'string | '
  - name: SqlQuerySpec
    fullName: SqlQuerySpec
    uid: '@azure/cosmos.SqlQuerySpec'
- uid: '@azure/cosmos.FeedOptions'
  spec.typeScript:
  - name: FeedOptions
    fullName: FeedOptions
    uid: '@azure/cosmos.FeedOptions'
- uid: '@azure/cosmos.QueryIterator<@azure/cosmos.DatabaseDefinition>'
  spec.typeScript:
  - name: QueryIterator
    fullName: QueryIterator
    uid: '@azure/cosmos.QueryIterator'
  - name: <
    fullName: <
  - name: DatabaseDefinition
    fullName: DatabaseDefinition
    uid: '@azure/cosmos.DatabaseDefinition'
  - name: '>'
    fullName: '>'
